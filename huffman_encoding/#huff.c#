// code for a huffman coder


#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "huff.h"
#define NUM_CHARS 256

// create a new huffcoder structure
struct huffcoder *  huffcoder_new()
{
  struct huffcoder * coder = malloc(sizeof(struct huffcoder));
  coder->tree = malloc(NUM_CHARS * sizeof(struct huffchar));
  return coder;
}

// count the frequency of characters in a file; set chars with zero
// frequency to one
void huffcoder_count(struct huffcoder * this, char * filename)
{
  unsigned char c; // we need the character to be unsigned to use it as an index
  FILE * file;
  file = fopen(filename, "r");
  assert( file != NULL );
  c = fgetc(file); // attempt to read a byte 
  while( !feof(file) ) { 
    this->freqs[c]++;
    c = fgetc(file); 
  } 
  fclose(file); 
}

// using the character frequencies build the tree of compound
// and simple characters that are used to compute the Huffman codes
void huffcoder_build_tree(struct huffcoder * this)
{
  for (int i = 0; i < t
}

// using the Huffman tree, build a table of the Huffman codes
// with the huffcoder object
void huffcoder_tree2table(struct huffcoder * this)
{
}


// print the Huffman codes for each character in order;
// you should not modify this function
void huffcoder_print_codes(struct huffcoder * this)
{
  for ( int i = 0; i < NUM_CHARS; i++ ) {
    // print the code
    printf("char: %d, freq: %d, code: %s\n", i, this->freqs[i], this->codes[i]);;
  }
}

// encode the input file and write the encoding to the output file
void huffcoder_encode(struct huffcoder * this, char * input_filename,
    char * output_filename)
{
}

// decode the input file and write the decoding to the output file
void huffcoder_decode(struct huffcoder * this, char * input_filename,
    char * output_filename)
{
}
